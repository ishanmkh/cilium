// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HubbleStatus Status of the Hubble server
// swagger:model HubbleStatus
type HubbleStatus struct {

	// Current number of flows this Hubble server instance stores
	CurrentFlows int64 `json:"current-flows,omitempty"`

	// Maximum number of flows this Hubble server instance is able to store
	MaxFlows int64 `json:"max-flows,omitempty"`

	// Human readable status/error/warning message
	Msg string `json:"msg,omitempty"`

	// State the component is in
	// Enum: [Ok Warning Failure Disabled]
	State string `json:"state,omitempty"`
}

// Validate validates this hubble status
func (m *HubbleStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hubbleStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ok","Warning","Failure","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hubbleStatusTypeStatePropEnum = append(hubbleStatusTypeStatePropEnum, v)
	}
}

const (

	// HubbleStatusStateOk captures enum value "Ok"
	HubbleStatusStateOk string = "Ok"

	// HubbleStatusStateWarning captures enum value "Warning"
	HubbleStatusStateWarning string = "Warning"

	// HubbleStatusStateFailure captures enum value "Failure"
	HubbleStatusStateFailure string = "Failure"

	// HubbleStatusStateDisabled captures enum value "Disabled"
	HubbleStatusStateDisabled string = "Disabled"
)

// prop value enum
func (m *HubbleStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hubbleStatusTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HubbleStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HubbleStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HubbleStatus) UnmarshalBinary(b []byte) error {
	var res HubbleStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
